"use client";

import {
  Area,
  AreaChart,
  CartesianGrid,
  ResponsiveContainer,
  XAxis,
  YAxis,
} from "recharts";
import {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";
import type { Scan } from "@/server/db/schema/scan";

const chartConfig = {
  critical: {
    label: "Critical",
    color: "hsl(0 72% 51%)", // text-red-600
  },
  high: {
    label: "High",
    color: "hsl(24 95% 53%)", // text-orange-500
  },
  medium: {
    label: "Medium",
    color: "hsl(48 96% 53%)", // text-yellow-500
  },
  low: {
    label: "Low",
    color: "hsl(217 91% 60%)", // text-blue-500
  },
} as const;

interface VulnerabilityChartProps {
  scans: Scan[];
}

export function VulnerabilityChart({ scans }: VulnerabilityChartProps) {
  const chartData = scans
    .sort((a, b) => a.startedAt.getTime() - b.startedAt.getTime())
    .map((scan) => ({
      name: scan.startedAt.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
      }),
      critical: scan.criticalCount,
      high: scan.highCount,
      medium: scan.mediumCount,
      low: scan.lowCount,
    }));

  return (
    <div className="space-y-6">
      <ChartContainer config={chartConfig} className="h-[240px] w-full">
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart
            data={chartData}
            margin={{ top: 0, right: 0, left: -10, bottom: -10 }}
          >
            <CartesianGrid
              strokeDasharray="3 3"
              vertical={false}
              stroke="#f1f5f9"
            />
            <XAxis
              dataKey="name"
              fontSize={12}
              tickLine={false}
              axisLine={false}
              stroke="#64748b"
              dy={0}
              tick={{ fill: "#64748b" }}
            />
            <YAxis hide={true} />
            <ChartTooltip
              content={<ChartTooltipContent />}
              cursor={{
                stroke: "#94a3b8",
                strokeWidth: 1,
                strokeDasharray: "4 4",
              }}
            />
            {Object.entries(chartConfig)
              .reverse()
              .map(([key, config]) => (
                <Area
                  key={key}
                  type="monotone"
                  dataKey={key}
                  stackId="1"
                  stroke={config.color}
                  fill={config.color}
                  fillOpacity={0.1}
                  strokeWidth={2}
                  dot={{
                    r: 3,
                    strokeWidth: 2,
                    fill: "white",
                    stroke: config.color,
                  }}
                  activeDot={{
                    r: 4,
                    strokeWidth: 2,
                    fill: "white",
                    stroke: config.color,
                  }}
                />
              ))}
          </AreaChart>
        </ResponsiveContainer>
      </ChartContainer>
    </div>
  );
}
